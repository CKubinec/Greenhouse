import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

/**
 * The GUI controller. This is the class that creates and Controls every button on the GUI and runs code from the
 * GreenhouseControls.
 *
 * @author Craig Kubinec ID:3433193
 * @see GreenhouseControls
 */
public class GUI extends JFrame {

    private final GreenhouseControls greenhouse = new GreenhouseControls(this);
    private boolean running = false;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();

        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                closeThisFrame();
            }
        });
        JPopupMenu popup = new JPopupMenu();
        JMenuItem item;

        item = new JMenuItem("Start");
        item.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });
        popup.add(item);

        item = new JMenuItem("Restart");
        item.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnRestartActionPerformed(evt);
            }
        });
        popup.add(item);

        popup.add(new JSeparator());

        item = new JMenuItem("Terminate");
        item.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnTerminateActionPerformed(evt);
            }
        });
        popup.add(item);

        popup.add(new JSeparator());

        item = new JMenuItem("Suspend");
        item.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnSuspendActionPerformed(evt);
            }
        });
        popup.add(item);

        item = new JMenuItem("Resume");
        item.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnResumeActionPerformed(evt);
            }
        });
        popup.add(item);

        jPanel1.setComponentPopupMenu(popup);

    }

    /**
     * Creates all the GUI Form.
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new JTextArea();
        btnRestart = new javax.swing.JButton();
        btnTerminate = new javax.swing.JButton();
        btnSuspend = new javax.swing.JButton();
        btnResume = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        eventsFile = new javax.swing.JTextField();
        btnStart = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newWindow = new JMenuItem();
        closeWindow = new JMenuItem();
        jSeparator1 = new JPopupMenu.Separator();
        openEventsFile = new JMenuItem();
        loadDumpFile = new JMenuItem();
        jSeparator2 = new JPopupMenu.Separator();
        exit = new JMenuItem();

        jButton4.setText("jButton1");

        jButton3.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        txtArea.setColumns(20);
        txtArea.setRows(5);
        txtArea.setEditable(false);
        jScrollPane1.setViewportView(txtArea);

        btnRestart.setText("Restart");
        btnRestart.setEnabled(false);
        btnRestart.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnRestartActionPerformed(evt);
            }
        });

        btnTerminate.setText("Terminate");
        btnTerminate.setEnabled(false);
        btnTerminate.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnTerminateActionPerformed(evt);
            }
        });

        btnSuspend.setText("Suspend");
        btnSuspend.setEnabled(false);
        btnSuspend.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnSuspendActionPerformed(evt);
            }
        });

        btnResume.setText("Resume");
        btnResume.setEnabled(false);
        btnResume.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnResumeActionPerformed(evt);
            }
        });

        jLabel1.setText("Events File:");

        eventsFile.setEditable(false);

        btnStart.setText("Start");
        btnStart.setEnabled(false);
        btnStart.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRestart, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTerminate, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSuspend, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnResume, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(eventsFile, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(eventsFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRestart, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTerminate, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSuspend, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnResume, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jMenu1.setText("File");

        newWindow.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, 0));
        newWindow.setText("New Window");
        newWindow.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                newWindowActionPerformed(evt);
            }
        });
        jMenu1.add(newWindow);

        closeWindow.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, 0));
        closeWindow.setText("Close Window");
        closeWindow.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                closeWindowActionPerformed(evt);
            }
        });
        jMenu1.add(closeWindow);
        jMenu1.add(jSeparator1);

        openEventsFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, 0));
        openEventsFile.setText("Open Events File");
        openEventsFile.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                openEventsFileActionPerformed(evt);
            }
        });
        jMenu1.add(openEventsFile);

        loadDumpFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, 0));
        loadDumpFile.setText("Load Dump File");
        loadDumpFile.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                loadDumpFileActionPerformed(evt);
            }
        });
        jMenu1.add(loadDumpFile);
        jMenu1.add(jSeparator2);

        exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, 0));
        exit.setText("Exit");
        exit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        jMenu1.add(exit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }
    /**
     * New greenhouse instance. Creates another instance of GUIController in new window.
     *
     * @param evt the event onClick
     */
    private void newWindowActionPerformed(ActionEvent evt) {
        new GUI().setVisible(true);
    }
    /**
     * Close greenhouse instance. Checks if Greenhouse is running and will exit current window if it is.
     * If running it will alert user and ask if user still wants to exit.
     */
    private void closeThisFrame() {
        if (this.running) {
            if (JOptionPane.showConfirmDialog(null,
                    "Events are being executed. Are you sure you want to close this window?", "Close Window?",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                this.dispose();
            }
        } else {
                this.dispose();
            }
        }
    /**
     * Calls the method closeThisFrame to close the current frame
     *
     * @param evt the event onClick
     */
    private void closeWindowActionPerformed(ActionEvent evt) {
        closeThisFrame();
    }
    /**
     * Open events file. Only will take files that are .txt format or will alert user that improper file.
     *
     * @param evt the event onClick
     */
    private void openEventsFileActionPerformed(ActionEvent evt) {
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jfc.setFileFilter(new FileNameExtensionFilter("Text files", "txt"));
        jfc.setAcceptAllFileFilterUsed(false);
        int returnValue = jfc.showOpenDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = jfc.getSelectedFile();
            greenhouse.setFilename(selectedFile.getAbsolutePath());
            eventsFile.setText(selectedFile.getAbsolutePath());
            btnStart.setEnabled(true);
            btnRestart.setEnabled(false);
            btnTerminate.setEnabled(false);
            btnSuspend.setEnabled(false);
            btnResume.setEnabled(false);
        }

    }
    /**
     * Restore greenhouse. Only takes files that are .out files or will alert user that file is improper.
     *
     * @param evt the event onClick
     */
    private void loadDumpFileActionPerformed(ActionEvent evt) {
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jfc.setFileFilter(new FileNameExtensionFilter("Object files", "out"));
        jfc.setAcceptAllFileFilterUsed(false);
        int returnValue = jfc.showOpenDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = jfc.getSelectedFile();
            greenhouse.new Restore(selectedFile.getAbsolutePath(), greenhouse);
            running = true;
            eventsFile.setText(selectedFile.getAbsolutePath());
            btnStart.setEnabled(false);
            btnRestart.setEnabled(false);
            btnTerminate.setEnabled(true);
            btnSuspend.setEnabled(true);
            btnResume.setEnabled(false);
            loadDumpFile.setEnabled(false);
        }
        Thread thread = new Thread() {
            public void run() {
                while (running) {
                    if (!greenhouse.isRunning()) {
                        running = false;
                        btnStart.setEnabled(false);
                        btnRestart.setEnabled(true);
                        btnTerminate.setEnabled(false);
                        btnSuspend.setEnabled(false);
                        btnResume.setEnabled(false);
                        loadDumpFile.setEnabled(true);
                    }
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        };
        thread.start();
    }
    /**
     * Exit all. Will exit the program. If running it will alert user and ask if user still wants to exit.
     *
     * @param evt the event onClick
     */
    private void exitActionPerformed(ActionEvent evt) {
        if (running) {
            if (JOptionPane.showConfirmDialog(null,
                    "Events are being executed. Are you sure you want to exit the System?", "Exit System?",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        } else {
            System.exit(0);
        }
    }
    /**
     * Start system. Boots the Greenhouse system with user selected EventsFile.
     *
     * @param evt the event onClick
     */
    private void btnStartActionPerformed(ActionEvent evt) {
        if (btnStart.isEnabled()) {
            startEvents();
        }
    }
    /**
     * Suspend threads. Tells all Greenhouse threads to wait until resumed.
     *
     * @param evt the event onClick
     */
    private void btnSuspendActionPerformed(ActionEvent evt) {
        if (!btnSuspend.isEnabled()) {
            return;
        }
        greenhouse.pauseEvents();
        btnStart.setEnabled(false);
        btnRestart.setEnabled(false);
        btnTerminate.setEnabled(false);
        btnSuspend.setEnabled(false);
        btnResume.setEnabled(true);
        loadDumpFile.setEnabled(false);
    }
    /**
     * Resume threads. Will resume the Greenhouse threads.
     *
     * @param evt the event onClick
     */
    private void btnResumeActionPerformed(ActionEvent evt) {
        if (!btnResume.isEnabled()) {
            return;
        }

        greenhouse.resumeEvents();
        btnStart.setEnabled(false);
        btnRestart.setEnabled(false);
        btnTerminate.setEnabled(true);
        btnSuspend.setEnabled(true);
        btnResume.setEnabled(false);
        loadDumpFile.setEnabled(false);
    }
    /**
     * Restart system. Will restart the system with current EventsFile.
     *
     * @param evt the event onClick
     */
    private void btnRestartActionPerformed(ActionEvent evt) {
        if (btnRestart.isEnabled()) {
            startEvents();
        }
    }
    /**
     * Terminate system. Will ask user for an input of milliseconds to create new Terminate Object in Greenhouse Controls.
     *
     * @param evt the event onClick
     */
    private void btnTerminateActionPerformed(ActionEvent evt) {
        if (!btnTerminate.isEnabled()) {
            return;
        }

        String input = JOptionPane.showInputDialog("Insert delay time (milliseconds):");
        if (input != null) {
            if (input.matches("^[0-9]*$")) {
                long delay = Long.parseLong(input);
                new Thread(new Terminate(greenhouse, delay)).start();
            } else {
                JOptionPane.showMessageDialog(null, "Invalid Value");
            }
        }
        Thread thread = new Thread() {
            public void run() {
                while (running) {
                    if (!greenhouse.isRunning()) {
                        //do nothing and wait for system to terminate to set running to false
                    }
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                running = false;
            }
        };
        thread.start();
    }

    /**
     * The entry point of application.
     *
     * @param args the input arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | UnsupportedLookAndFeelException | IllegalAccessException | InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    //Start of declarations
    private javax.swing.JButton btnRestart;
    private javax.swing.JButton btnResume;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnSuspend;
    private javax.swing.JButton btnTerminate;
    private JMenuItem closeWindow;
    private javax.swing.JTextField eventsFile;
    private JMenuItem exit;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private JPopupMenu.Separator jSeparator1;
    private JPopupMenu.Separator jSeparator2;
    private JMenuItem loadDumpFile;
    private JMenuItem newWindow;
    private JMenuItem openEventsFile;
    private JTextArea txtArea;

    /**
     * Method used by GreenhouseControls to print to GUI.
     *
     * @return the TextArea object for this GUI
     * @see GreenhouseControls
     */
    public JTextArea getTxtArea() {
        return txtArea;
    }
    /**
     * Start system. Boots the Greenhouse system with user selected EventsFile.
     */
    private void startEvents() {
        btnStart.setEnabled(false);
        btnRestart.setEnabled(false);
        btnTerminate.setEnabled(true);
        btnSuspend.setEnabled(true);
        btnResume.setEnabled(false);
        loadDumpFile.setEnabled(false);
        greenhouse.boot();
        running = true;

        Thread thread = new Thread() {
            public void run() {
                while (running) {
                    if (!greenhouse.isRunning()) {
                        btnStart.setEnabled(false);
                        btnRestart.setEnabled(true);
                        btnTerminate.setEnabled(false);
                        btnSuspend.setEnabled(false);
                        btnResume.setEnabled(false);
                        loadDumpFile.setEnabled(true);
                        running = false;
                    }
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        };
        thread.start();
    }

}
